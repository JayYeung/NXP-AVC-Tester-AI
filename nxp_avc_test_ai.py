# -*- coding: utf-8 -*-
"""NXP AVC test AI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enmHdqSb0_EzQuT3EwYFVo8DLG_1jyWr

# Generate example AVC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
import seaborn as sns

data=[]
score=[]
n=100 #number of examples

for i in range(n): #create n examples, 
  arr=[]
  for j in range(10): #each is a list of 10 numbers (representing the numbers after R___)
    arr.append(random.randint(0, 1000))
  score.append(arr[6]*7/100) #this makes everything based on 7th term
  #score.append(5*arr[6]+2*arr[3]*arr[3]+4*arr[5]*arr[5]+7/arr[2]+arr[1]) #random polynomial 
  data.append(arr)

#scale scores so that they are between 0 and 70 (linearly)
score[:] = [int(i / max(score) * 70) for i in score]
for i in range(n):
  data[i].append(score[i])

df = pd.DataFrame(data, columns=['r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'score'])
df

"""# Calculate Leverage for each Variable"""

plt.figure(figsize=(12,10))
cor = df.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()

#Correlation with output variable
cor_target = abs(cor["score"])

#Selecting highly correlated features
relevant_features = cor_target[cor_target>0.2]
relevant_features

"""# Split data and use AI models"""

X=df.iloc[:, : 10]
y=df['score']
#print(X)
#print(y)

# split train and test data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y)
print(len(X), len(y))
#print(X_train)
#print(X_test)

#linear regression
from sklearn.linear_model import LinearRegression
linearRegr = LinearRegression()
linearRegr.fit(X_train, y_train)
predictions = linearRegr.predict(X_test)
score = linearRegr.score(X_test, y_test)

trainPredictions = linearRegr.predict(X_train)
trainScore = linearRegr.score(X_train, y_train)

print(score, trainScore)

#neural net sk learn, search for best alpha for given dataset
from sklearn.neural_network import MLPClassifier

bestScore=-1 
bestAlpha=3 #number for anti overfitting

'''for i  in np.arange(0, 1e-4, 1e-5): 
  mlp= MLPClassifier(alpha=i, hidden_layer_sizes=(10,), random_state=1, max_iter=5000)
  mlp.fit(X_train, y_train)

  predictions = mlp.predict(X_test)
  score = mlp.score(X_test, y_test)

  trainPredictions = mlp.predict(X_train)
  trainScore = mlp.score(X_train, y_train) 

  if(score>bestScore): 
    bestAlpha=i 
    bestScore=score '''
mlp= MLPClassifier(alpha=bestAlpha, hidden_layer_sizes=(10,), random_state=1, max_iter=30000)
mlp.fit(X_train, y_train)

predictions = mlp.predict(X_test)
score = mlp.score(X_test, y_test)

trainPredictions = mlp.predict(X_train)
trainScore = mlp.score(X_train, y_train)   
print(bestAlpha, score, trainScore)